# Generated by Django 5.2.4 on 2025-09-02 06:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('planner', '0008_synclock'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CanvasAnnouncement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.CharField(help_text='Canvas announcement ID', max_length=100)),
                ('course_id', models.CharField(help_text='Canvas course ID', max_length=100)),
                ('course_name', models.CharField(blank=True, max_length=255)),
                ('title', models.CharField(max_length=500)),
                ('message', models.TextField(blank=True)),
                ('posted_at', models.DateTimeField()),
                ('html_url', models.URLField(help_text='Link to Canvas announcement')),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('canvas_updated_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CanvasAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.CharField(help_text='Canvas assignment ID', max_length=100)),
                ('course_id', models.CharField(help_text='Canvas course ID', max_length=100)),
                ('course_name', models.CharField(blank=True, max_length=255)),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('points_possible', models.FloatField(blank=True, null=True)),
                ('submission_types', models.JSONField(default=list)),
                ('html_url', models.URLField(help_text='Link to Canvas assignment')),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('canvas_updated_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CanvasIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_base_url', models.URLField(help_text='Canvas instance URL (e.g., https://university.instructure.com)')),
                ('canvas_access_token', models.CharField(blank=True, help_text='Canvas API access token', max_length=500)),
                ('is_enabled', models.BooleanField(default=True)),
                ('sync_assignments', models.BooleanField(default=True)),
                ('sync_todos', models.BooleanField(default=True)),
                ('sync_announcements', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CanvasSyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_type', models.CharField(choices=[('manual', 'Manual Sync'), ('automatic', 'Automatic Sync'), ('assignments', 'Assignments Only'), ('todos', 'To-dos Only'), ('announcements', 'Announcements Only')], default='manual', max_length=20)),
                ('status', models.CharField(choices=[('success', 'Success'), ('partial', 'Partial Success'), ('failed', 'Failed')], max_length=20)),
                ('assignments_synced', models.IntegerField(default=0)),
                ('todos_synced', models.IntegerField(default=0)),
                ('announcements_synced', models.IntegerField(default=0)),
                ('tasks_created', models.IntegerField(default=0)),
                ('tasks_updated', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True)),
                ('sync_duration', models.DurationField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='CanvasTodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.CharField(help_text='Canvas planner item ID', max_length=100)),
                ('plannable_type', models.CharField(help_text='Type of Canvas item (assignment, discussion_topic, etc)', max_length=50)),
                ('plannable_id', models.CharField(help_text='ID of the plannable item', max_length=100)),
                ('title', models.CharField(max_length=500)),
                ('course_id', models.CharField(blank=True, max_length=100, null=True)),
                ('course_name', models.CharField(blank=True, max_length=255)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('html_url', models.URLField(help_text='Link to Canvas item')),
                ('last_synced', models.DateTimeField(auto_now=True)),
                ('canvas_updated_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='external_id',
            field=models.CharField(blank=True, help_text='ID from external system (Canvas, Google Calendar, etc.)', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='task',
            name='source',
            field=models.CharField(choices=[('manual', 'Manual Entry'), ('canvas', 'Canvas LMS'), ('google_calendar', 'Google Calendar')], default='manual', max_length=20),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['user', 'source'], name='planner_tas_user_id_9088a2_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['user', 'external_id'], name='planner_tas_user_id_6abfc7_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['user', 'status', 'deadline'], name='planner_tas_user_id_e229ab_idx'),
        ),
        migrations.AddField(
            model_name='canvasannouncement',
            name='task',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='canvas_announcement', to='planner.task'),
        ),
        migrations.AddField(
            model_name='canvasannouncement',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canvas_announcements', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='canvasassignment',
            name='task',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='canvas_assignment', to='planner.task'),
        ),
        migrations.AddField(
            model_name='canvasassignment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canvas_assignments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='canvasintegration',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='canvas_integration', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='canvassynclog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canvas_sync_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='canvastodo',
            name='task',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='canvas_todo', to='planner.task'),
        ),
        migrations.AddField(
            model_name='canvastodo',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canvas_todos', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='canvasannouncement',
            index=models.Index(fields=['user', 'posted_at'], name='planner_can_user_id_c83f8e_idx'),
        ),
        migrations.AddIndex(
            model_name='canvasannouncement',
            index=models.Index(fields=['user', 'course_id'], name='planner_can_user_id_0dace1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='canvasannouncement',
            unique_together={('user', 'canvas_id')},
        ),
        migrations.AddIndex(
            model_name='canvasassignment',
            index=models.Index(fields=['user', 'canvas_id'], name='planner_can_user_id_1ac853_idx'),
        ),
        migrations.AddIndex(
            model_name='canvasassignment',
            index=models.Index(fields=['user', 'due_date'], name='planner_can_user_id_5ac8a5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='canvasassignment',
            unique_together={('user', 'canvas_id')},
        ),
        migrations.AddIndex(
            model_name='canvastodo',
            index=models.Index(fields=['user', 'plannable_type'], name='planner_can_user_id_3f1f24_idx'),
        ),
        migrations.AddIndex(
            model_name='canvastodo',
            index=models.Index(fields=['user', 'due_date'], name='planner_can_user_id_e2dae9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='canvastodo',
            unique_together={('user', 'canvas_id')},
        ),
    ]
